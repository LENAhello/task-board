generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  boards        Board[]
  accounts      Account[]

  @@map("users")
}

model Board {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  lists     List[]
}

model List {
  id        String   @id @default(cuid())
  title     String
  order     Int
  boardId   String
  createdAt DateTime @default(now())
  board     Board    @relation(fields: [boardId], references: [id])
  tasks     Task[]
}

model Task {
  id        String   @id @default(cuid())
  title     String
  order     Int
  listId    String
  createdAt DateTime @default(now())
  list      List     @relation(fields: [listId], references: [id])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
